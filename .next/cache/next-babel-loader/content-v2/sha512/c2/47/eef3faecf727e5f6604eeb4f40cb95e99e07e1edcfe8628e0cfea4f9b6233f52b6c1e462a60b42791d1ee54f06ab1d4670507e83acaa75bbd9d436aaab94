{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Works\\\\Max\\\\326-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\n// Meetup Details Component Page\n// DYNAMIC Page\nimport Head from 'next/head';\nimport { Fragment } from 'react';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\nconst uidDb = 'dbUser';\nconst pwdDb = 'pr!BRItOXechl2Esp$St';\nconst nameDb = 'meetups';\nconst uriMongoDb = `mongodb+srv://${uidDb}:${pwdDb}@cluster0.d4upq.mongodb.net/${nameDb}?retryWrites=true&w=majority`; // const MeetupDetailsPage = () => {\n\nconst MeetupDetailsPage = props => {\n  // console.log('Data from getStaticProps')\n  // console.log(props)\n  return (\n    /*#__PURE__*/\n    // image=\"images/Kamp's_Earthship.png\"\n    // title=\"Kamp's_Earthship\"\n    // address=\"same, random, address\"\n    // description=\"some random description\"\n    _jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: props.meetupData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"description\", {\n          children: props.meetupData.decription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Meetup Details Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n        image: props.meetupData.image,\n        title: props.meetupData.title,\n        address: props.meetupData.address,\n        description: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  );\n}; // when getStaticProps is used on a dynamic page (like this one)\n// getStaticPaths must be provided\n// BECAUSE: every instance of the dynamic page must be pre-generated\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\n\n\nexport const getStaticPaths = async () => {\n  //\n  const mongoClient = await MongoClient.connect(uriMongoDb);\n  const meetupsDb = mongoClient.db();\n  const meetupsCollection = meetupsDb.collection('meetups'); // find({}, {_id: 1})\n  //      {} ... empty filter criteria\n  //          {_id: 1} ... only pull out the _id values\n\n  const MDB_MEETUPS = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  mongoClient.close();\n  return {\n    paths: MDB_MEETUPS.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })),\n    // [\n    //   { params: {meetupId: 'm1'} },\n    //   { params: {meetupId: 'm2'} },\n    //   { params: {meetupId: 'm3'} },\n    //   { params: {meetupId: 'm4'} },\n    //   { params: {meetupId: 'm5'} },\n    // ],\n    fallback: false\n  };\n}; // fallback: false ... when paths supports all possible paths\n// fallback: true  ... when paths does not supports all possible paths\n//                     NextJS will try to generate the paths dynamically\n\nexport const getStaticProps = async context => {\n  //\n  const meetupId = context.params.meetupId; // e.g. fetch data from API\n\n  const mongoClient = await MongoClient.connect(uriMongoDb);\n  const meetupsDb = mongoClient.db();\n  const meetupsCollection = meetupsDb.collection('meetups'); // find({}, {_id: 1})\n  //      {} ... empty filter criteria\n  //          {_id: 1} ... only pull out the _id values\n  // const MDB_MEETUPS = await meetupsCollection.find({}, { _id: 1 }).toArray()\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  mongoClient.close();\n  return {\n    props: {\n      // meetupData: {\n      //   img: \"images/Kamp's_Earthship.png\",\n      //   id: meetupId,\n      //   title: \"Kamp's_Earthship\",\n      //   address: 'same, random, address',\n      //   description: 'some random description',\n      // },\n      // meetupData: selectedMeetup,\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    },\n    revalidate: 10\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/Tonio/Works/Max/326-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Head","Fragment","MongoClient","ObjectId","MeetupDetail","uidDb","pwdDb","nameDb","uriMongoDb","MeetupDetailsPage","props","meetupData","title","decription","image","address","description","getStaticPaths","mongoClient","connect","meetupsDb","db","meetupsCollection","collection","MDB_MEETUPS","find","_id","toArray","close","paths","map","meetup","params","meetupId","toString","fallback","getStaticProps","context","selectedMeetup","findOne","id","revalidate"],"mappings":"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","sourcesContent":["// Meetup Details Component Page\r\n// DYNAMIC Page\r\n\r\nimport Head from 'next/head'\r\n\r\nimport { Fragment } from 'react'\r\n\r\nimport { MongoClient, ObjectId } from 'mongodb'\r\n\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\r\n\r\nconst uidDb = 'dbUser'\r\nconst pwdDb = 'pr!BRItOXechl2Esp$St'\r\nconst nameDb = 'meetups'\r\nconst uriMongoDb = `mongodb+srv://${uidDb}:${pwdDb}@cluster0.d4upq.mongodb.net/${nameDb}?retryWrites=true&w=majority`\r\n\r\n// const MeetupDetailsPage = () => {\r\nconst MeetupDetailsPage = (props) => {\r\n  // console.log('Data from getStaticProps')\r\n  // console.log(props)\r\n  return (\r\n        // image=\"images/Kamp's_Earthship.png\"\r\n        // title=\"Kamp's_Earthship\"\r\n        // address=\"same, random, address\"\r\n        // description=\"some random description\"\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <description>{ props.meetupData.decription }</description>\r\n      </Head>\r\n      <h1>Meetup Details Page</h1>\r\n      <MeetupDetail\r\n        image={props.meetupData.image}\r\n        title={props.meetupData.title}\r\n        address={props.meetupData.address}\r\n        description={props.meetupData.description}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n// when getStaticProps is used on a dynamic page (like this one)\r\n// getStaticPaths must be provided\r\n// BECAUSE: every instance of the dynamic page must be pre-generated\r\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\r\nexport const getStaticPaths = async () => {\r\n  //\r\n  const mongoClient = await MongoClient.connect(uriMongoDb)\r\n  const meetupsDb = mongoClient.db()\r\n  const meetupsCollection = meetupsDb.collection('meetups')\r\n\r\n  // find({}, {_id: 1})\r\n  //      {} ... empty filter criteria\r\n  //          {_id: 1} ... only pull out the _id values\r\n  const MDB_MEETUPS = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n\r\n  mongoClient.close()\r\n\r\n  return {\r\n    paths: MDB_MEETUPS.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    // [\r\n    //   { params: {meetupId: 'm1'} },\r\n    //   { params: {meetupId: 'm2'} },\r\n    //   { params: {meetupId: 'm3'} },\r\n    //   { params: {meetupId: 'm4'} },\r\n    //   { params: {meetupId: 'm5'} },\r\n    // ],\r\n    fallback: false,\r\n  }\r\n}\r\n// fallback: false ... when paths supports all possible paths\r\n// fallback: true  ... when paths does not supports all possible paths\r\n//                     NextJS will try to generate the paths dynamically\r\n\r\nexport const getStaticProps = async (context) => {\r\n  //\r\n  const meetupId = context.params.meetupId\r\n\r\n  // e.g. fetch data from API\r\n  const mongoClient = await MongoClient.connect(uriMongoDb)\r\n  const meetupsDb = mongoClient.db()\r\n  const meetupsCollection = meetupsDb.collection('meetups')\r\n\r\n  // find({}, {_id: 1})\r\n  //      {} ... empty filter criteria\r\n  //          {_id: 1} ... only pull out the _id values\r\n  // const MDB_MEETUPS = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n  const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\r\n\r\n  mongoClient.close()\r\n\r\n  return {\r\n    props: {\r\n      // meetupData: {\r\n      //   img: \"images/Kamp's_Earthship.png\",\r\n      //   id: meetupId,\r\n      //   title: \"Kamp's_Earthship\",\r\n      //   address: 'same, random, address',\r\n      //   description: 'some random description',\r\n      // },\r\n      // meetupData: selectedMeetup,\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n    revalidate: 10,\r\n  }\r\n}\r\n\r\nexport default MeetupDetailsPage\r\n"]},"metadata":{},"sourceType":"module"}