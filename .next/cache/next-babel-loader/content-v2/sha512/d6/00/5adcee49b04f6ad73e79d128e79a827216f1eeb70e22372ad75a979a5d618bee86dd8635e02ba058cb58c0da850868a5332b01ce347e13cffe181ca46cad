{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Works\\\\Max\\\\326-onwards-to-a-bigger-project-starting-project\\\\pages\\\\index.js\",\n    _this = this;\n\n// Home Component Page\nvar uidDb = 'dbUser';\nvar pwdDb = 'pr!BRItOXechl2Esp$St';\nvar nameDb = 'meetups';\nvar uriMongoDb = \"mongodb+srv://\".concat(uidDb, \":\").concat(pwdDb, \"@cluster0.d4upq.mongodb.net/\").concat(nameDb, \"?retryWrites=true&w=majority\"); // console.log('Home Page: 02')\n// console.log(uriMongoDb)\n\nimport { Fragment } from 'react'; // import { Fragment, useEffect, useState } from 'react'\n\nimport MeetupList from '../components/meetups/MeetupList'; // import Layout from '../components/layout/Layout'\n// 'https://commons.wikimedia.org/wiki/File:Convection_banner_1.jpg#/media/File:Convection_banner_1.jpg',\n// \"https://commons.wikimedia.org/wiki/File:Kamp%27s_Earthship.png#/media/File:Kamp's_Earthship.png\",\n// 'https://commons.wikimedia.org/wiki/File:Earthship_Brighton_Front.jpg#/media/File:Earthship_Brighton_Front.jpg',\n// 'https://commons.wikimedia.org/wiki/File:Inside_greenhouse_of_Global_model_Earthship.JPG#/media/File:Inside_greenhouse_of_Global_model_Earthship.JPG',\n// 'https://commons.wikimedia.org/wiki/File:G2_Global_model_Earthship_Taos_N.M..JPG#/media/File:G2_Global_model_Earthship_Taos_N.M..JPG',\n// const DUMMY_MEETUPS = [\n//   {\n//     id: 'm1',\n//     image: 'images/Convection_banner.jpg',\n//     title: 'Convection banner',\n//     address: 'Design',\n//     descriptopn: 'meetup one',\n//   },\n//   {\n//     id: 'm2',\n//     image: \"images/Kamp's_Earthship.png\",\n//     title: \"Kamp's Earthship\",\n//     address: 'New Mexico',\n//     descriptopn: 'meetup two',\n//   },\n//   {\n//     id: 'm3',\n//     image: 'images/Earthship_Brighton_Front.jpg',\n//     title: 'Brighton Earthship',\n//     address: 'Brighton',\n//     descriptopn: 'meetup three',\n//   },\n//   {\n//     id: 'm4',\n//     image: 'images/Inside_greenhouse_of_Global_model_Earthship.jpeg',\n//     title: 'Inside greenhouse of Global model',\n//     address: 'New Mexico',\n//     descriptopn: 'meetup four',\n//   },\n//   {\n//     id: 'm5',\n//     image: 'images/Global_model_Earthship_Taos_N.M.jpeg',\n//     title: 'Global model Earthship Taos',\n//     address: 'New Mexico',\n//     descriptopn: 'meetup five',\n//   },\n// ]\n// props from the pre-render call to getStaticProps\n\nvar HomePage = function HomePage(props) {\n  //#region\n  //\n  // const [loadedMeetups, setLoadedMeetups] = useState([])\n  // the empty dependency array means the effect is run\n  // on the initial render of the component\n  // useEffect(() => {\n  // 1. send http request to fetch meetups data\n  // 2. setLoadedMeetups()\n  // simulate fetching data via an http request\n  // setLoadedMeetups(DUMMY_MEETUPS)\n  // }, [])\n  // ! NOTE: the useEffect function is run after\n  // ! the component function has executed\n  // therefore in the initial render of the component\n  //  loadedMeetups is empty\n  // then the state changes when the useEffect function is executed\n  // this causes the component to be re-rendered... loadedMeetups populated\n  // const testStr = 'hjhkjfghfdkgjh'\n  //#endregion\n  console.log('Home Page: 02');\n  console.log(uriMongoDb);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HomePage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, _this);\n}; // runs on the server after deployment\n// for every request for this component page\n// better for situations where the data changes frequently... e.g every sec\n// export const getServerSideProps = async (context) => {\n//   // e.g fetch data from an API\n//   const requestObj = context.req\n//   const responseObj = context.res\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   }\n// }\n// Only for Component Page... NextJS looks for getStaticProps\n// to produce page pre-loaded with data on the server... not client-side\n// getStaticProps gets called before the component function\n// NOTES: runs duriog the build process\n// better for situations where the data does not changes frequently\n// ADV: makes use of caching\n// export async function getStaticProps() {\n\n\n_c = HomePage;\nexport var __N_SSG = true;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["C:/Users/Tonio/Works/Max/326-onwards-to-a-bigger-project-starting-project/pages/index.js"],"names":["uidDb","pwdDb","nameDb","uriMongoDb","Fragment","MeetupList","HomePage","props","console","log","meetups"],"mappings":";;;;;AAAA;AAIA,IAAMA,KAAK,GAAG,QAAd;AACA,IAAMC,KAAK,GAAG,sBAAd;AACA,IAAMC,MAAM,GAAG,SAAf;AACA,IAAMC,UAAU,2BAAoBH,KAApB,cAA6BC,KAA7B,yCAAiEC,MAAjE,iCAAhB,C,CACA;AACA;;AAEA,SAASE,QAAT,QAAyB,OAAzB,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,kCAAvB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AAEA,sBACE,QAAC,QAAD;AAAA,4BAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,eAKE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEI,KAAK,CAACG;AAA3B;AAAA;AAAA;AAAA;AAAA,aALF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CAtCD,C,CAwCA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA9DMJ,Q;;AAuGN,eAAeA,QAAf","sourcesContent":["// Home Component Page\r\n\r\nimport { MongoClient } from 'mongodb'\r\n\r\nconst uidDb = 'dbUser'\r\nconst pwdDb = 'pr!BRItOXechl2Esp$St'\r\nconst nameDb = 'meetups'\r\nconst uriMongoDb = `mongodb+srv://${uidDb}:${pwdDb}@cluster0.d4upq.mongodb.net/${nameDb}?retryWrites=true&w=majority`\r\n// console.log('Home Page: 02')\r\n// console.log(uriMongoDb)\r\n\r\nimport { Fragment } from 'react'\r\n// import { Fragment, useEffect, useState } from 'react'\r\n\r\nimport MeetupList from '../components/meetups/MeetupList'\r\n\r\n// import Layout from '../components/layout/Layout'\r\n\r\n// 'https://commons.wikimedia.org/wiki/File:Convection_banner_1.jpg#/media/File:Convection_banner_1.jpg',\r\n// \"https://commons.wikimedia.org/wiki/File:Kamp%27s_Earthship.png#/media/File:Kamp's_Earthship.png\",\r\n// 'https://commons.wikimedia.org/wiki/File:Earthship_Brighton_Front.jpg#/media/File:Earthship_Brighton_Front.jpg',\r\n// 'https://commons.wikimedia.org/wiki/File:Inside_greenhouse_of_Global_model_Earthship.JPG#/media/File:Inside_greenhouse_of_Global_model_Earthship.JPG',\r\n// 'https://commons.wikimedia.org/wiki/File:G2_Global_model_Earthship_Taos_N.M..JPG#/media/File:G2_Global_model_Earthship_Taos_N.M..JPG',\r\n\r\n// const DUMMY_MEETUPS = [\r\n//   {\r\n//     id: 'm1',\r\n//     image: 'images/Convection_banner.jpg',\r\n//     title: 'Convection banner',\r\n//     address: 'Design',\r\n//     descriptopn: 'meetup one',\r\n//   },\r\n//   {\r\n//     id: 'm2',\r\n//     image: \"images/Kamp's_Earthship.png\",\r\n//     title: \"Kamp's Earthship\",\r\n//     address: 'New Mexico',\r\n//     descriptopn: 'meetup two',\r\n//   },\r\n//   {\r\n//     id: 'm3',\r\n//     image: 'images/Earthship_Brighton_Front.jpg',\r\n//     title: 'Brighton Earthship',\r\n//     address: 'Brighton',\r\n//     descriptopn: 'meetup three',\r\n//   },\r\n//   {\r\n//     id: 'm4',\r\n//     image: 'images/Inside_greenhouse_of_Global_model_Earthship.jpeg',\r\n//     title: 'Inside greenhouse of Global model',\r\n//     address: 'New Mexico',\r\n//     descriptopn: 'meetup four',\r\n//   },\r\n//   {\r\n//     id: 'm5',\r\n//     image: 'images/Global_model_Earthship_Taos_N.M.jpeg',\r\n//     title: 'Global model Earthship Taos',\r\n//     address: 'New Mexico',\r\n//     descriptopn: 'meetup five',\r\n//   },\r\n// ]\r\n\r\n// props from the pre-render call to getStaticProps\r\n\r\nconst HomePage = (props) => {\r\n  //#region\r\n  //\r\n\r\n  // const [loadedMeetups, setLoadedMeetups] = useState([])\r\n\r\n  // the empty dependency array means the effect is run\r\n  // on the initial render of the component\r\n  // useEffect(() => {\r\n  // 1. send http request to fetch meetups data\r\n  // 2. setLoadedMeetups()\r\n\r\n  // simulate fetching data via an http request\r\n  // setLoadedMeetups(DUMMY_MEETUPS)\r\n  // }, [])\r\n  // ! NOTE: the useEffect function is run after\r\n  // ! the component function has executed\r\n  // therefore in the initial render of the component\r\n  //  loadedMeetups is empty\r\n  // then the state changes when the useEffect function is executed\r\n  // this causes the component to be re-rendered... loadedMeetups populated\r\n\r\n  // const testStr = 'hjhkjfghfdkgjh'\r\n  //#endregion\r\n\r\n  console.log('Home Page: 02')\r\n  console.log(uriMongoDb)\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* <Layout> */}\r\n      {/* moved into _app.js */}\r\n      <h1>HomePage</h1>\r\n      {/* <MeetupList meetups={loadedMeetups} /> */}\r\n      <MeetupList meetups={props.meetups} />\r\n      {/* </Layout> */}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n// runs on the server after deployment\r\n// for every request for this component page\r\n// better for situations where the data changes frequently... e.g every sec\r\n// export const getServerSideProps = async (context) => {\r\n//   // e.g fetch data from an API\r\n\r\n//   const requestObj = context.req\r\n//   const responseObj = context.res\r\n\r\n//   return {\r\n//     props: {\r\n//       meetups: DUMMY_MEETUPS,\r\n//     },\r\n//   }\r\n// }\r\n\r\n// Only for Component Page... NextJS looks for getStaticProps\r\n// to produce page pre-loaded with data on the server... not client-side\r\n// getStaticProps gets called before the component function\r\n// NOTES: runs duriog the build process\r\n// better for situations where the data does not changes frequently\r\n// ADV: makes use of caching\r\n// export async function getStaticProps() {\r\nexport const getStaticProps = async () => {\r\n  // e.g fetch data from an API... etc\r\n\r\n  // NextJS allow the use fetch on the server-side\r\n  // BUT using fetch here is a bit redundant, it is run on the server\r\n  // const DB_MEETUPS = await fetch('/api/meetups')\r\n\r\n  const mongoClient = await MongoClient.connect(uriMongoDb)\r\n  const meetupsDb = mongoClient.db()\r\n  const meetupsCollection = meetupsDb.collection('meetups')\r\n\r\n  const MDB_MEETUPS = await meetupsCollection.find().toArray()\r\n  console.log('Home Page: 02')\r\n  console.log(`Meetups found: ${MDB_MEETUPS.length}`)\r\n\r\n  mongoClient.close()\r\n\r\n  // getStaticProps must always return an object\r\n  // revalidate (number in seconds) ... enables incremental static generation\r\n  //    if there are requests for this page the data gets regenerated on that frequency\r\n\r\n  // meetups: DUMMY_MEETUPS,\r\n  // the call to map() is required because the object returned from MongoDb\r\n  // has an Id object that cannot be handled without code\r\n  return {\r\n    // props: {\r\n    //   meetups: MDB_MEETUPS.map((meetup) => ({\r\n    //     id: meetup._id.toString(),\r\n    //     title: meetup.title,\r\n    //     address: meetup.address,\r\n    //     image: meetup.image,\r\n    //     description: meetup.description,\r\n    //   })),\r\n    // props: {\r\n    //   meetups: MDB_MEETUPS,\r\n    // },\r\n    revalidate: 10,\r\n  }\r\n}\r\n\r\nexport default HomePage\r\n"]},"metadata":{},"sourceType":"module"}