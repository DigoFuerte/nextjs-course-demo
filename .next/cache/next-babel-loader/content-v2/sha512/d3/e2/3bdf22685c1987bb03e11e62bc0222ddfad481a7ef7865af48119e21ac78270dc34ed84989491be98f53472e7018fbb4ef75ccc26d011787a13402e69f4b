{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Works\\\\Max\\\\326-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\",\n    _this = this;\n\n// Meetup Details Component Page\n// DYNAMIC Page\nimport Head from 'next/head';\nimport { Fragment } from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\n// const MeetupDetailsPage = () => {\nvar MeetupDetailsPage = function MeetupDetailsPage(props) {\n  // console.log('Data from getStaticProps')\n  // console.log(props)\n  return (\n    /*#__PURE__*/\n    // image=\"images/Kamp's_Earthship.png\"\n    // title=\"Kamp's_Earthship\"\n    // address=\"same, random, address\"\n    // description=\"some random description\"\n    _jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Head, {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: props.meetupData.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n          name: \"\",\n          children: props.meetupData.decription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Meetup Details Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n        image: props.meetupData.image,\n        title: props.meetupData.title,\n        address: props.meetupData.address,\n        description: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, _this)\n  );\n}; // when getStaticProps is used on a dynamic page (like this one)\n// getStaticPaths must be provided\n// BECAUSE: every instance of the dynamic page must be pre-generated\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\n\n\n_c = MeetupDetailsPage;\nexport var __N_SSG = true;\nexport default MeetupDetailsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetailsPage\");","map":{"version":3,"sources":["C:/Users/Tonio/Works/Max/326-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Head","Fragment","MeetupDetail","MeetupDetailsPage","props","meetupData","title","decription","image","address","description"],"mappings":";;;;;AAAA;AACA;AAEA,OAAOA,IAAP,MAAiB,WAAjB;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAIA,OAAOC,YAAP,MAAyB,uCAAzB;;AAOA;AACA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnC;AACA;AACA;AAAA;AACM;AACA;AACA;AACA;AACJ,YAAC,QAAD;AAAA,8BACE,QAAC,IAAD;AAAA,gCACE;AAAA,oBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAM,UAAA,IAAI,EAAC,EAAX;AAAA,oBAAgBF,KAAK,CAACC,UAAN,CAAiBE;AAAjC;AAAA;AAAA;AAAA;AAAA,iBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,eAME,QAAC,YAAD;AACE,QAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,QAAA,KAAK,EAAEJ,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGE,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI,OAH5B;AAIE,QAAA,WAAW,EAAEL,KAAK,CAACC,UAAN,CAAiBK;AAJhC;AAAA;AAAA;AAAA;AAAA,eANF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAmBD,CAtBD,C,CAwBA;AACA;AACA;AACA;;;KA3BMP,iB;;AAkGN,eAAeA,iBAAf","sourcesContent":["// Meetup Details Component Page\r\n// DYNAMIC Page\r\n\r\nimport Head from 'next/head'\r\n\r\nimport { Fragment } from 'react'\r\n\r\nimport { MongoClient, ObjectId } from 'mongodb'\r\n\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\r\n\r\nconst uidDb = 'dbUser'\r\nconst pwdDb = 'pr!BRItOXechl2Esp$St'\r\nconst nameDb = 'meetups'\r\nconst uriMongoDb = `mongodb+srv://${uidDb}:${pwdDb}@cluster0.d4upq.mongodb.net/${nameDb}?retryWrites=true&w=majority`\r\n\r\n// const MeetupDetailsPage = () => {\r\nconst MeetupDetailsPage = (props) => {\r\n  // console.log('Data from getStaticProps')\r\n  // console.log(props)\r\n  return (\r\n        // image=\"images/Kamp's_Earthship.png\"\r\n        // title=\"Kamp's_Earthship\"\r\n        // address=\"same, random, address\"\r\n        // description=\"some random description\"\r\n    <Fragment>\r\n      <Head>\r\n        <title>{props.meetupData.title}</title>\r\n        <meta name=''>{ props.meetupData.decription }</meta>\r\n      </Head>\r\n      <h1>Meetup Details Page</h1>\r\n      <MeetupDetail\r\n        image={props.meetupData.image}\r\n        title={props.meetupData.title}\r\n        address={props.meetupData.address}\r\n        description={props.meetupData.description}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n// when getStaticProps is used on a dynamic page (like this one)\r\n// getStaticPaths must be provided\r\n// BECAUSE: every instance of the dynamic page must be pre-generated\r\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\r\nexport const getStaticPaths = async () => {\r\n  //\r\n  const mongoClient = await MongoClient.connect(uriMongoDb)\r\n  const meetupsDb = mongoClient.db()\r\n  const meetupsCollection = meetupsDb.collection('meetups')\r\n\r\n  // find({}, {_id: 1})\r\n  //      {} ... empty filter criteria\r\n  //          {_id: 1} ... only pull out the _id values\r\n  const MDB_MEETUPS = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n\r\n  mongoClient.close()\r\n\r\n  return {\r\n    paths: MDB_MEETUPS.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n    // [\r\n    //   { params: {meetupId: 'm1'} },\r\n    //   { params: {meetupId: 'm2'} },\r\n    //   { params: {meetupId: 'm3'} },\r\n    //   { params: {meetupId: 'm4'} },\r\n    //   { params: {meetupId: 'm5'} },\r\n    // ],\r\n    fallback: false,\r\n  }\r\n}\r\n// fallback: false ... when paths supports all possible paths\r\n// fallback: true  ... when paths does not supports all possible paths\r\n//                     NextJS will try to generate the paths dynamically\r\n\r\nexport const getStaticProps = async (context) => {\r\n  //\r\n  const meetupId = context.params.meetupId\r\n\r\n  // e.g. fetch data from API\r\n  const mongoClient = await MongoClient.connect(uriMongoDb)\r\n  const meetupsDb = mongoClient.db()\r\n  const meetupsCollection = meetupsDb.collection('meetups')\r\n\r\n  // find({}, {_id: 1})\r\n  //      {} ... empty filter criteria\r\n  //          {_id: 1} ... only pull out the _id values\r\n  // const MDB_MEETUPS = await meetupsCollection.find({}, { _id: 1 }).toArray()\r\n  const selectedMeetup = await meetupsCollection.findOne({ _id: ObjectId(meetupId) })\r\n\r\n  mongoClient.close()\r\n\r\n  return {\r\n    props: {\r\n      // meetupData: {\r\n      //   img: \"images/Kamp's_Earthship.png\",\r\n      //   id: meetupId,\r\n      //   title: \"Kamp's_Earthship\",\r\n      //   address: 'same, random, address',\r\n      //   description: 'some random description',\r\n      // },\r\n      // meetupData: selectedMeetup,\r\n      meetupData: {\r\n        id: selectedMeetup._id.toString(),\r\n        title: selectedMeetup.title,\r\n        address: selectedMeetup.address,\r\n        image: selectedMeetup.image,\r\n        description: selectedMeetup.description,\r\n      },\r\n    },\r\n    revalidate: 10,\r\n  }\r\n}\r\n\r\nexport default MeetupDetailsPage\r\n"]},"metadata":{},"sourceType":"module"}