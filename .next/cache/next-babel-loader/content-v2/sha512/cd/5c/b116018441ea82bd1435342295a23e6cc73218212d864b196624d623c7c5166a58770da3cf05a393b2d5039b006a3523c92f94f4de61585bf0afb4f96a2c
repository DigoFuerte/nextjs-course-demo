{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Tonio\\\\Works\\\\Max\\\\326-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\n// Meetup Details Component Page\n// DYNAMIC Page\nimport { Fragment } from 'react';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetailsPage = () => {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meetup Details Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: \"images/Kamp's_Earthship.png\",\n      title: \"Kamp's_Earthship\",\n      address: \"same, random, address\",\n      description: \"some random description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}; // when getStaticProps is used on a dynamic page (like this one)\n// getStaticPaths must be provided\n// BECAUSE: every instance of the dynamic page must be pre-generated\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\n\n\nexport const getStaticPaths = async () => {\n  return {\n    paths: [{\n      params: {\n        meetupId: 'm1'\n      }\n    }, {\n      params: {\n        meetupId: 'm2'\n      }\n    }, {\n      params: {\n        meetupId: 'm3'\n      }\n    }, {\n      params: {\n        meetupId: 'm4'\n      }\n    }, {\n      params: {\n        meetupId: 'm5'\n      }\n    }],\n    fallback: false\n  };\n}; // fallback: false ... when paths supports all possible paths\n// fallback: true  ... when paths does not supports all possible paths\n//                     NextJS will try to generate the paths dynamically\n\nexport const getStaticProps = async context => {\n  // e.g. fetch data from API\n  const meetupId = context.params.meetupId;\n  return {\n    props: {\n      meetupData: {\n        img: \"images/Kamp's_Earthship.png\",\n        id: meetupId,\n        title: \"Kamp's_Earthship\",\n        address: 'same, random, address',\n        description: 'some random description'\n      }\n    },\n    revalidate: 10\n  };\n};\nexport default MeetupDetailsPage;","map":{"version":3,"sources":["C:/Users/Tonio/Works/Max/326-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetailsPage","getStaticPaths","paths","params","meetupId","fallback","getStaticProps","context","props","meetupData","img","id","title","address","description","revalidate"],"mappings":";;AAAA;AACA;AAEA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,sBACE,QAAC,QAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,6BADR;AAEE,MAAA,KAAK,EAAC,kBAFR;AAGE,MAAA,OAAO,EAAC,uBAHV;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAZD,C,CAcA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,SAAO;AACLC,IAAAA,KAAK,EAAE,CACL;AAAEC,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AAAV,KADK,EAEL;AAAED,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AAAV,KAFK,EAGL;AAAED,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AAAV,KAHK,EAIL;AAAED,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AAAV,KAJK,EAKL;AAAED,MAAAA,MAAM,EAAE;AAACC,QAAAA,QAAQ,EAAE;AAAX;AAAV,KALK,CADF;AAQLC,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD,CAXM,C,CAYP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AAEA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,SAAO;AACLI,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE;AACVC,QAAAA,GAAG,EAAE,6BADK;AAEVC,QAAAA,EAAE,EAAEP,QAFM;AAGVQ,QAAAA,KAAK,EAAE,kBAHG;AAIVC,QAAAA,OAAO,EAAE,uBAJC;AAKVC,QAAAA,WAAW,EAAE;AALH;AADP,KADF;AAULC,IAAAA,UAAU,EAAE;AAVP,GAAP;AAYD,CAjBM;AAmBP,eAAef,iBAAf","sourcesContent":["// Meetup Details Component Page\r\n// DYNAMIC Page\r\n\r\nimport { Fragment } from 'react'\r\nimport MeetupDetail from '../../components/meetups/MeetupDetail'\r\n\r\nconst MeetupDetailsPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <h1>Meetup Details Page</h1>\r\n      <MeetupDetail\r\n        image=\"images/Kamp's_Earthship.png\"\r\n        title=\"Kamp's_Earthship\"\r\n        address=\"same, random, address\"\r\n        description=\"some random description\"\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\n// when getStaticProps is used on a dynamic page (like this one)\r\n// getStaticPaths must be provided\r\n// BECAUSE: every instance of the dynamic page must be pre-generated\r\n//          at build time e.g for id1,id2, ... id[n-1], id[n]\r\nexport const getStaticPaths = async () => {\r\n  return {\r\n    paths: [\r\n      { params: {meetupId: 'm1'} },\r\n      { params: {meetupId: 'm2'} },\r\n      { params: {meetupId: 'm3'} },\r\n      { params: {meetupId: 'm4'} },\r\n      { params: {meetupId: 'm5'} },\r\n    ],\r\n    fallback: false,\r\n  }\r\n}\r\n// fallback: false ... when paths supports all possible paths\r\n// fallback: true  ... when paths does not supports all possible paths\r\n//                     NextJS will try to generate the paths dynamically\r\nexport const getStaticProps = async (context) => {\r\n  // e.g. fetch data from API\r\n\r\n  const meetupId = context.params.meetupId\r\n\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        img: \"images/Kamp's_Earthship.png\",\r\n        id: meetupId,\r\n        title: \"Kamp's_Earthship\",\r\n        address: 'same, random, address',\r\n        description: 'some random description',\r\n      },\r\n    },\r\n    revalidate: 10,\r\n  }\r\n}\r\n\r\nexport default MeetupDetailsPage\r\n"]},"metadata":{},"sourceType":"module"}